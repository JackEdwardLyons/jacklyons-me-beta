{"ast":null,"code":"import _defineProperty from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/components/FormSection.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport _ from 'lodash';\nimport { classNames, markdownify } from '../utils';\nimport FormField from './FormField';\n\nvar FormSection = /*#__PURE__*/function (_React$Component) {\n  _inherits(FormSection, _React$Component);\n\n  var _super = _createSuper(FormSection);\n\n  function FormSection() {\n    _classCallCheck(this, FormSection);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(FormSection, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var section = _.get(this.props, 'section');\n\n      var sectionId = _.get(section, 'section_id');\n\n      var title = _.get(section, 'title');\n\n      var subtitle = _.get(section, 'subtitle');\n\n      var content = _.get(section, 'content');\n\n      var hasText = title || subtitle || content;\n\n      var formId = _.get(section, 'form_id');\n\n      var formAction = _.get(section, 'form_action');\n\n      var formFields = _.get(section, 'form_fields');\n\n      var submitLabel = _.get(section, 'submit_label');\n\n      var formHoneypotInputId = formId + '-honeypot';\n      var formHoneypotLabelId = formId + '-honeypot-label';\n      var formHoneypotName = formId + '-bot-field';\n      return /*#__PURE__*/_jsxDEV(\"section\", {\n        id: sectionId,\n        className: \"section section--form\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container container--lg\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classNames({\n              'grid': hasText\n            }),\n            children: [hasText && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"section__content cell\",\n              children: [title && /*#__PURE__*/_jsxDEV(\"h2\", {\n                className: \"section__title line-top\",\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 43\n              }, this), subtitle && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"section__subtitle\",\n                children: subtitle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 30,\n                columnNumber: 46\n              }, this), content && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"section__body text-block\",\n                children: markdownify(content)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 32,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classNames('section__form-container', {\n                'cell': hasText\n              }),\n              children: /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n                name: formId,\n                id: formId\n              }, formAction ? {\n                action: formAction\n              } : null), {}, {\n                method: \"POST\",\n                \"data-netlify\": \"true\",\n                \"data-netlify-honeypot\": formHoneypotName,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"screen-reader-text\",\n                  children: /*#__PURE__*/_jsxDEV(\"label\", {\n                    id: formHoneypotLabelId,\n                    htmlFor: formHoneypotInputId,\n                    children: [\"Don't fill this out if you're human:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                      \"aria-labelledby\": formHoneypotLabelId,\n                      id: formHoneypotInputId,\n                      name: formHoneypotName\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 50,\n                      columnNumber: 41\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 48,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 47,\n                  columnNumber: 33\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"hidden\",\n                  name: \"form-name\",\n                  value: formId\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 57,\n                  columnNumber: 33\n                }, this), _.map(formFields, function (field, index) {\n                  return /*#__PURE__*/_jsxDEV(FormField, {\n                    field: field,\n                    section: section\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 59,\n                    columnNumber: 37\n                  }, _this);\n                }), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"form-submit\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    type: \"submit\",\n                    className: \"button button--primary\",\n                    children: submitLabel\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 62,\n                    columnNumber: 37\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 33\n                }, this)]\n              }), void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 39,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return FormSection;\n}(React.Component);\n\nexport { FormSection as default };","map":{"version":3,"sources":["/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/components/FormSection.js"],"names":["React","_","classNames","markdownify","FormField","FormSection","section","get","props","sectionId","title","subtitle","content","hasText","formId","formAction","formFields","submitLabel","formHoneypotInputId","formHoneypotLabelId","formHoneypotName","action","map","field","index","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nimport { classNames, markdownify } from '../utils';\nimport FormField from './FormField';\n\nexport default class FormSection extends React.Component {\n    render() {\n        const section = _.get(this.props, 'section');\n        const sectionId = _.get(section, 'section_id');\n        const title = _.get(section, 'title');\n        const subtitle = _.get(section, 'subtitle');\n        const content = _.get(section, 'content');\n        const hasText = title || subtitle || content;\n        const formId = _.get(section, 'form_id');\n        const formAction = _.get(section, 'form_action');\n        const formFields = _.get(section, 'form_fields');\n        const submitLabel = _.get(section, 'submit_label');\n        const formHoneypotInputId = formId + '-honeypot';\n        const formHoneypotLabelId = formId + '-honeypot-label';\n        const formHoneypotName = formId + '-bot-field';\n\n        return (\n            <section id={sectionId} className=\"section section--form\">\n                <div className=\"container container--lg\">\n                    <div className={classNames({ 'grid': hasText })}>\n                        {hasText && (\n                            <div className=\"section__content cell\">\n                                {title && <h2 className=\"section__title line-top\">{title}</h2>}\n                                {subtitle && <p className=\"section__subtitle\">{subtitle}</p>}\n                                {content && (\n                                    <div className=\"section__body text-block\">\n                                        {markdownify(content)}\n                                    </div>\n                                )}\n                            </div>\n                        )}\n                        <div className={classNames('section__form-container', { 'cell': hasText })}>\n                            <form\n                                name={formId}\n                                id={formId}\n                                {...(formAction ? ({ action: formAction }) : null)}\n                                method=\"POST\"\n                                data-netlify=\"true\"\n                                data-netlify-honeypot={formHoneypotName}\n                            >\n                                <div className=\"screen-reader-text\">\n                                    <label id={formHoneypotLabelId} htmlFor={formHoneypotInputId}>\n                                        Don't fill this out if you're human:\n                                        <input\n                                            aria-labelledby={formHoneypotLabelId}\n                                            id={formHoneypotInputId}\n                                            name={formHoneypotName}\n                                        />\n                                    </label>\n                                </div>\n                                <input type=\"hidden\" name=\"form-name\" value={formId} />\n                                {_.map(formFields, (field, index) => (\n                                    <FormField key={index} field={field} section={section} />\n                                ))}\n                                <div className=\"form-submit\">\n                                    <button type=\"submit\" className=\"button button--primary\">\n                                        {submitLabel}\n                                    </button>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </section>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}