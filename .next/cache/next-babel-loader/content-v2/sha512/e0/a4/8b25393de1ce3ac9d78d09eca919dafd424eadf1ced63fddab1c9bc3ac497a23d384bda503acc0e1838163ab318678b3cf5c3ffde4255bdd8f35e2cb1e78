{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/layouts/post.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment-strftime\";\nimport Markdown from \"markdown-to-jsx\";\nimport { Layout } from \"../components/index\";\nimport { withPrefix, markdownify, getPageUrl } from \"../utils\";\nimport BlogFeedItem from \"../components/BlogFeedItem\";\n\nvar Post = /*#__PURE__*/function (_React$Component) {\n  _inherits(Post, _React$Component);\n\n  var _super = _createSuper(Post);\n\n  function Post() {\n    _classCallCheck(this, Post);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Post, [{\n    key: \"renderPostNavLinks\",\n    value: function renderPostNavLinks(post, index, posts, postCount, currentPostUrl) {\n      var postUrl = getPageUrl(post);\n\n      if (postUrl !== currentPostUrl) {\n        return null;\n      }\n\n      var prevIndex = index - 1;\n      var prevPost = index !== 0 ? posts[prevIndex] : null;\n      var nextIndex = index + 1;\n      var nextPost = index < postCount - 1 ? posts[nextIndex] : null;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid post-feed post-feed--col-two\",\n        children: [prevPost && /*#__PURE__*/_jsxDEV(BlogFeedItem, {\n          post: prevPost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 22\n        }, this), nextPost && /*#__PURE__*/_jsxDEV(BlogFeedItem, {\n          post: nextPost\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 22\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }, this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var data = _.get(this.props, \"data\");\n\n      var config = _.get(data, \"config\");\n\n      var page = _.get(this.props, \"page\");\n\n      var title = _.get(page, \"title\");\n\n      var subtitle = _.get(page, \"subtitle\");\n\n      var image = _.get(page, \"image\");\n\n      var imageAlt = _.get(page, \"image_alt\", \"\");\n\n      var date = _.get(page, \"date\");\n\n      var dateTimeAttr = moment(date).strftime(\"%Y-%m-%d %H:%M\");\n      var formattedDate = moment(date).strftime(\"%A, %B %e, %Y\");\n\n      var markdownContent = _.get(page, \"markdown_content\");\n\n      var postUrl = getPageUrl(page);\n\n      var posts = _.orderBy(_.get(this.props, \"posts\", []), \"date\", \"desc\");\n\n      var postCount = _.size(posts);\n\n      console.log({\n        postUrl: postUrl\n      });\n\n      if (postUrl.endsWith(\"diving-into-web-components\")) {}\n\n      return /*#__PURE__*/_jsxDEV(Layout, {\n        page: page,\n        config: config,\n        children: [/*#__PURE__*/_jsxDEV(\"article\", {\n          className: \"post\",\n          children: [/*#__PURE__*/_jsxDEV(\"header\", {\n            className: \"post__header\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container container--md\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                className: \"post__title line-top\",\n                children: title\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 55,\n                columnNumber: 15\n              }, this), subtitle && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post__subtitle\",\n                children: subtitle\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 28\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this), image && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post__image\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container container--lg\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: withPrefix(image),\n                alt: imageAlt\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), markdownContent && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post__body text-block\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container container--md\",\n              children: [markdownify(markdownContent), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"post-content inner-sm\",\n                children: /*#__PURE__*/_jsxDEV(Markdown, {\n                  options: {\n                    overrides: {// Subscribe: {\n                      //   component: Subscribe,\n                      // },\n                      // FeedbackForm: {\n                      //   component: FeedbackForm,\n                      // },\n                    }\n                  },\n                  children: _.get(this.props, \"page.markdown\", null)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 72,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 71,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n            className: \"post__meta\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"container container--md\",\n              children: [\"Posted on\", \" \", /*#__PURE__*/_jsxDEV(\"time\", {\n                className: \"published\",\n                dateTime: dateTimeAttr,\n                children: formattedDate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 9\n        }, this), postCount > 1 && /*#__PURE__*/_jsxDEV(\"nav\", {\n          className: \"section section--posts\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container container--lg\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"section__title line-top\",\n              children: \"Read Next\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this), _.map(posts, function (post, index) {\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: _this.renderPostNavLinks(post, index, posts, postCount, postUrl)\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, _this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this);\n    }\n  }]);\n\n  return Post;\n}(React.Component);\n\nexport { Post as default };","map":{"version":3,"sources":["/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/layouts/post.js"],"names":["React","_","moment","Markdown","Layout","withPrefix","markdownify","getPageUrl","BlogFeedItem","Post","post","index","posts","postCount","currentPostUrl","postUrl","prevIndex","prevPost","nextIndex","nextPost","data","get","props","config","page","title","subtitle","image","imageAlt","date","dateTimeAttr","strftime","formattedDate","markdownContent","orderBy","size","console","log","endsWith","overrides","map","renderPostNavLinks","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport _ from \"lodash\";\nimport moment from \"moment-strftime\";\nimport Markdown from \"markdown-to-jsx\";\nimport { Layout } from \"../components/index\";\nimport { withPrefix, markdownify, getPageUrl } from \"../utils\";\n\nimport BlogFeedItem from \"../components/BlogFeedItem\";\n\nexport default class Post extends React.Component {\n  renderPostNavLinks(post, index, posts, postCount, currentPostUrl) {\n    const postUrl = getPageUrl(post);\n    if (postUrl !== currentPostUrl) {\n      return null;\n    }\n    const prevIndex = index - 1;\n    const prevPost = index !== 0 ? posts[prevIndex] : null;\n    const nextIndex = index + 1;\n    const nextPost = index < postCount - 1 ? posts[nextIndex] : null;\n\n    return (\n      <div className=\"grid post-feed post-feed--col-two\">\n        {prevPost && <BlogFeedItem post={prevPost} />}\n        {nextPost && <BlogFeedItem post={nextPost} />}\n      </div>\n    );\n  }\n\n  render() {\n    const data = _.get(this.props, \"data\");\n    const config = _.get(data, \"config\");\n    const page = _.get(this.props, \"page\");\n    const title = _.get(page, \"title\");\n    const subtitle = _.get(page, \"subtitle\");\n    const image = _.get(page, \"image\");\n    const imageAlt = _.get(page, \"image_alt\", \"\");\n    const date = _.get(page, \"date\");\n    const dateTimeAttr = moment(date).strftime(\"%Y-%m-%d %H:%M\");\n    const formattedDate = moment(date).strftime(\"%A, %B %e, %Y\");\n    const markdownContent = _.get(page, \"markdown_content\");\n    const postUrl = getPageUrl(page);\n    const posts = _.orderBy(_.get(this.props, \"posts\", []), \"date\", \"desc\");\n    const postCount = _.size(posts);\n\n    console.log({ postUrl });\n\n    if (postUrl.endsWith(\"diving-into-web-components\")) {\n    }\n\n    return (\n      <Layout page={page} config={config}>\n        <article className=\"post\">\n          <header className=\"post__header\">\n            <div className=\"container container--md\">\n              <h1 className=\"post__title line-top\">{title}</h1>\n              {subtitle && <div className=\"post__subtitle\">{subtitle}</div>}\n            </div>\n          </header>\n          {image && (\n            <div className=\"post__image\">\n              <div className=\"container container--lg\">\n                <img src={withPrefix(image)} alt={imageAlt} />\n              </div>\n            </div>\n          )}\n          {markdownContent && (\n            <div className=\"post__body text-block\">\n              <div className=\"container container--md\">\n                {markdownify(markdownContent)}\n\n                <div className=\"post-content inner-sm\">\n                  <Markdown\n                    options={{\n                      overrides: {\n                        // Subscribe: {\n                        //   component: Subscribe,\n                        // },\n                        // FeedbackForm: {\n                        //   component: FeedbackForm,\n                        // },\n                      },\n                    }}\n                  >\n                    {_.get(this.props, \"page.markdown\", null)}\n                  </Markdown>\n\n                  {/* <Subscribe />/ */}\n                </div>\n              </div>\n            </div>\n          )}\n          <footer className=\"post__meta\">\n            <div className=\"container container--md\">\n              Posted on{\" \"}\n              <time className=\"published\" dateTime={dateTimeAttr}>\n                {formattedDate}\n              </time>\n            </div>\n          </footer>\n        </article>\n        {postCount > 1 && (\n          <nav className=\"section section--posts\">\n            <div className=\"container container--lg\">\n              <h2 className=\"section__title line-top\">Read Next</h2>\n              {_.map(posts, (post, index) => (\n                <React.Fragment key={index}>\n                  {this.renderPostNavLinks(\n                    post,\n                    index,\n                    posts,\n                    postCount,\n                    postUrl\n                  )}\n                </React.Fragment>\n              ))}\n            </div>\n          </nav>\n        )}\n      </Layout>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}