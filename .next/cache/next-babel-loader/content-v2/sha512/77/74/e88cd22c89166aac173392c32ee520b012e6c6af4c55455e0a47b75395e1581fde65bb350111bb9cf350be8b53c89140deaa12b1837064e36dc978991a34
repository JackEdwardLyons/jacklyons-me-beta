{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/components/Header.js\";\nimport React from 'react';\nimport Router from 'next/router';\nimport _ from 'lodash';\nimport { Link, withPrefix, classNames, getPageUrl } from '../utils';\nimport Action from './Action';\nexport default class Header extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleWindowResize = this.handleWindowResize.bind(this);\n    this.handleRouteChange = this.handleRouteChange.bind(this);\n    this.menuOpenRef = /*#__PURE__*/React.createRef();\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleWindowResize, true);\n    Router.events.on('routeChangeStart', this.handleRouteChange);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleWindowResize, true);\n    Router.events.off('routeChangeStart', this.handleRouteChange);\n  }\n\n  handleWindowResize() {\n    const menuOpenElm = _.get(this.menuOpenRef, 'current.offsetParent');\n\n    if (menuOpenElm === null) {\n      document.body.classList.remove('js-nav-open');\n    }\n  }\n\n  handleRouteChange() {\n    document.body.classList.remove('js-nav-open');\n  }\n\n  handleMenuToggle(event) {\n    event.preventDefault();\n    document.body.classList.toggle('js-nav-open');\n  }\n\n  render() {\n    const page = _.get(this.props, 'page');\n\n    const pageUrl = _.trim(getPageUrl(page), '/');\n\n    const config = _.get(this.props, 'config');\n\n    const header = _.get(config, 'header');\n\n    const logo = _.get(header, 'logo_img');\n\n    const logoAlt = _.get(header, 'logo_img_alt', '');\n\n    const title = _.get(header, 'title');\n\n    const hasNav = _.get(header, 'has_nav');\n\n    const navLinks = _.get(header, 'nav_links');\n\n    return /*#__PURE__*/_jsxDEV(\"header\", {\n      id: \"masthead\",\n      className: \"site-header container\",\n      children: /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"navbar\",\n        \"aria-label\": \"Main Navigation\",\n        children: [logo ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"navbar__logo\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: withPrefix('/'),\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: withPrefix(logo),\n              alt: logoAlt\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 58\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"navbar__title\",\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            href: withPrefix('/'),\n            children: title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 25\n        }, this), hasNav && !_.isEmpty(navLinks) && /*#__PURE__*/_jsxDEV(React.Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"navbar__open\",\n            className: \"navbar__toggle\",\n            ref: this.menuOpenRef,\n            onClick: this.handleMenuToggle.bind(this),\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"screen-reader-text\",\n              children: \"Open Menu\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"icon-menu\",\n              \"aria-hidden\": \"true\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 69,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"navbar__menu-container\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"navbar__scroller\",\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                id: \"navbar__close\",\n                className: \"navbar__toggle\",\n                onClick: this.handleMenuToggle.bind(this),\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"screen-reader-text\",\n                  children: \"Close Menu\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 74,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"icon-close\",\n                  \"aria-hidden\": \"true\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 75,\n                  columnNumber: 41\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                className: \"navbar__menu menu\",\n                children: _.map(navLinks, (action, index) => {\n                  const actionUrl = _.trim(_.get(action, 'url'), '/');\n\n                  const actionStyle = _.get(action, 'style', 'link');\n\n                  return /*#__PURE__*/_jsxDEV(\"li\", {\n                    className: classNames('menu__item', {\n                      'menu__item--current': pageUrl === actionUrl,\n                      'menu__item--button': actionStyle !== 'link'\n                    }),\n                    children: /*#__PURE__*/_jsxDEV(Action, {\n                      action: action\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 89,\n                      columnNumber: 53\n                    }, this)\n                  }, index, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 82,\n                    columnNumber: 49\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/components/Header.js"],"names":["React","Router","_","Link","withPrefix","classNames","getPageUrl","Action","Header","Component","constructor","props","handleWindowResize","bind","handleRouteChange","menuOpenRef","createRef","componentDidMount","window","addEventListener","events","on","componentWillUnmount","removeEventListener","off","menuOpenElm","get","document","body","classList","remove","handleMenuToggle","event","preventDefault","toggle","render","page","pageUrl","trim","config","header","logo","logoAlt","title","hasNav","navLinks","isEmpty","map","action","index","actionUrl","actionStyle"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Router from 'next/router';\nimport _ from 'lodash';\n\nimport { Link, withPrefix, classNames, getPageUrl } from '../utils';\nimport Action from './Action';\n\nexport default class Header extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleWindowResize = this.handleWindowResize.bind(this);\n        this.handleRouteChange = this.handleRouteChange.bind(this);\n        this.menuOpenRef = React.createRef();\n    }\n\n    componentDidMount() {\n        window.addEventListener('resize', this.handleWindowResize, true);\n        Router.events.on('routeChangeStart', this.handleRouteChange);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowResize, true);\n        Router.events.off('routeChangeStart', this.handleRouteChange);\n    }\n\n    handleWindowResize() {\n        const menuOpenElm = _.get(this.menuOpenRef, 'current.offsetParent');\n        if (menuOpenElm === null) {\n            document.body.classList.remove('js-nav-open');\n        }\n    }\n\n    handleRouteChange() {\n        document.body.classList.remove('js-nav-open');\n    }\n\n    handleMenuToggle(event) {\n        event.preventDefault();\n        document.body.classList.toggle('js-nav-open');\n    }\n\n    render() {\n        const page = _.get(this.props, 'page');\n        const pageUrl = _.trim(getPageUrl(page), '/');\n        const config = _.get(this.props, 'config');\n        const header = _.get(config, 'header');\n        const logo = _.get(header, 'logo_img');\n        const logoAlt = _.get(header, 'logo_img_alt', '');\n        const title = _.get(header, 'title');\n        const hasNav = _.get(header, 'has_nav');\n        const navLinks = _.get(header, 'nav_links');\n\n        return (\n            <header id=\"masthead\" className=\"site-header container\">\n                <nav className=\"navbar\" aria-label=\"Main Navigation\">\n                    {logo ? (\n                        <div className=\"navbar__logo\">\n                            <Link href={withPrefix('/')}><img src={withPrefix(logo)} alt={logoAlt} /></Link>\n                        </div>\n                    ) : (\n                        <div className=\"navbar__title\">\n                            <Link href={withPrefix('/')}>{title}</Link>\n                        </div>\n                    )}\n                    {hasNav && !_.isEmpty(navLinks) && (\n                        <React.Fragment>\n                            <button id=\"navbar__open\" className=\"navbar__toggle\" ref={this.menuOpenRef} onClick={this.handleMenuToggle.bind(this)}>\n                                <span className=\"screen-reader-text\">Open Menu</span>\n                                <span className=\"icon-menu\" aria-hidden=\"true\" />\n                            </button>\n                            <div className=\"navbar__menu-container\">\n                                <div className=\"navbar__scroller\">\n                                    <button id=\"navbar__close\" className=\"navbar__toggle\" onClick={this.handleMenuToggle.bind(this)}>\n                                        <span className=\"screen-reader-text\">Close Menu</span>\n                                        <span className=\"icon-close\" aria-hidden=\"true\" />\n                                    </button>\n                                    <ul className=\"navbar__menu menu\">\n                                        {_.map(navLinks, (action, index) => {\n                                            const actionUrl = _.trim(_.get(action, 'url'), '/');\n                                            const actionStyle = _.get(action, 'style', 'link');\n                                            return (\n                                                <li\n                                                    key={index}\n                                                    className={classNames('menu__item', {\n                                                        'menu__item--current': pageUrl === actionUrl,\n                                                        'menu__item--button': actionStyle !== 'link'\n                                                    })}\n                                                >\n                                                    <Action action={action} />\n                                                </li>\n                                            )\n                                        })}\n                                    </ul>\n                                </div>\n                            </div>\n                        </React.Fragment>\n                    )}\n                </nav>\n            </header>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}