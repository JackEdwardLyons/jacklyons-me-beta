{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport _ from 'lodash';\nimport components, { Layout } from '../components/index';\nimport { getPageUrl } from '../utils';\nimport PortfolioItem from '../components/PortfolioItem';\nexport default class Project extends React.Component {\n  renderProjectNavLinks(project, index, projects, projectCount, currentProjectUrl) {\n    const projectUrl = getPageUrl(project);\n\n    if (projectUrl !== currentProjectUrl) {\n      return null;\n    }\n\n    const prevIndex = index - 1;\n    const prevProject = index !== 0 ? projects[prevIndex] : null;\n    const nextIndex = index + 1;\n    const nextProject = index < projectCount - 1 ? projects[nextIndex] : null;\n    return /*#__PURE__*/_jsxs(\"div\", {\n      className: \"grid portfolio-feed portfolio-feed--tiles\",\n      children: [prevProject && /*#__PURE__*/_jsx(PortfolioItem, {\n        project: prevProject\n      }), nextProject && /*#__PURE__*/_jsx(PortfolioItem, {\n        project: nextProject\n      })]\n    });\n  }\n\n  render() {\n    const data = _.get(this.props, 'data');\n\n    const config = _.get(data, 'config');\n\n    const page = _.get(this.props, 'page');\n\n    const title = _.get(page, 'title');\n\n    const subtitle = _.get(page, 'subtitle');\n\n    const sections = _.get(page, 'sections');\n\n    const projectUrl = getPageUrl(page);\n\n    const projects = _.orderBy(_.get(this.props, 'projects', []), 'date', 'desc');\n\n    const projectCount = _.size(projects);\n\n    return /*#__PURE__*/_jsxs(Layout, {\n      page: page,\n      config: config,\n      children: [/*#__PURE__*/_jsxs(\"article\", {\n        className: \"project\",\n        children: [/*#__PURE__*/_jsx(\"header\", {\n          className: \"project__header\",\n          children: /*#__PURE__*/_jsxs(\"div\", {\n            className: \"container container--md\",\n            children: [/*#__PURE__*/_jsx(\"h1\", {\n              className: \"project__title line-top\",\n              children: title\n            }), subtitle && /*#__PURE__*/_jsx(\"div\", {\n              className: \"project__subtitle\",\n              children: subtitle\n            })]\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"project__body\",\n          children: _.map(sections, (section, index) => {\n            const sectionType = _.get(section, 'type');\n\n            const component = _.upperFirst(_.camelCase(sectionType));\n\n            if (!component) {\n              throw new Error(`page section does not have the 'type' property, page: ${projectUrl}`);\n            }\n\n            const Component = components[component];\n\n            if (!Component) {\n              throw new Error(`no component matching the page section's type: ${sectionType}`);\n            }\n\n            return /*#__PURE__*/_jsx(Component, {\n              section: section,\n              data: data\n            }, index);\n          })\n        })]\n      }), projectCount > 1 && /*#__PURE__*/_jsx(\"nav\", {\n        className: \"section section--portfolio\",\n        children: /*#__PURE__*/_jsxs(\"div\", {\n          className: \"container container--lg\",\n          children: [/*#__PURE__*/_jsx(\"h2\", {\n            className: \"section__title line-top\",\n            children: \"More Projects\"\n          }), _.map(projects, (project, index) => /*#__PURE__*/_jsx(React.Fragment, {\n            children: this.renderProjectNavLinks(project, index, projects, projectCount, projectUrl)\n          }, index))]\n        })\n      })]\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}