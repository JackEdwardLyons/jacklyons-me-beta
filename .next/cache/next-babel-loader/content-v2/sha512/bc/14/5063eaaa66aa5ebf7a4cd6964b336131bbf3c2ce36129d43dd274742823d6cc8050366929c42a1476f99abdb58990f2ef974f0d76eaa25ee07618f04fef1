{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/layouts/project.js\";\nimport React from 'react';\nimport _ from 'lodash';\nimport components, { Layout } from '../components/index';\nimport { getPageUrl } from '../utils';\nimport PortfolioItem from '../components/PortfolioItem';\nexport default class Project extends React.Component {\n  renderProjectNavLinks(project, index, projects, projectCount, currentProjectUrl) {\n    const projectUrl = getPageUrl(project);\n\n    if (projectUrl !== currentProjectUrl) {\n      return null;\n    }\n\n    const prevIndex = index - 1;\n    const prevProject = index !== 0 ? projects[prevIndex] : null;\n    const nextIndex = index + 1;\n    const nextProject = index < projectCount - 1 ? projects[nextIndex] : null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid portfolio-feed portfolio-feed--tiles\",\n      children: [prevProject && /*#__PURE__*/_jsxDEV(PortfolioItem, {\n        project: prevProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 33\n      }, this), nextProject && /*#__PURE__*/_jsxDEV(PortfolioItem, {\n        project: nextProject\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }, this);\n  }\n\n  render() {\n    const data = _.get(this.props, 'data');\n\n    const config = _.get(data, 'config');\n\n    const page = _.get(this.props, 'page');\n\n    const title = _.get(page, 'title');\n\n    const subtitle = _.get(page, 'subtitle');\n\n    const sections = _.get(page, 'sections');\n\n    const projectUrl = getPageUrl(page);\n\n    const projects = _.orderBy(_.get(this.props, 'projects', []), 'date', 'desc');\n\n    const projectCount = _.size(projects);\n\n    return /*#__PURE__*/_jsxDEV(Layout, {\n      page: page,\n      config: config,\n      children: [/*#__PURE__*/_jsxDEV(\"article\", {\n        className: \"project\",\n        children: [/*#__PURE__*/_jsxDEV(\"header\", {\n          className: \"project__header\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"container container--md\",\n            children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"project__title line-top\",\n              children: title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 29\n            }, this), subtitle && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"project__subtitle\",\n              children: subtitle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"project__body\",\n          children: _.map(sections, (section, index) => {\n            const sectionType = _.get(section, 'type');\n\n            const component = _.upperFirst(_.camelCase(sectionType));\n\n            if (!component) {\n              throw new Error(`page section does not have the 'type' property, page: ${projectUrl}`);\n            }\n\n            const Component = components[component];\n\n            if (!Component) {\n              throw new Error(`no component matching the page section's type: ${sectionType}`);\n            }\n\n            return /*#__PURE__*/_jsxDEV(Component, {\n              section: section,\n              data: data\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 36\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), projectCount > 1 && /*#__PURE__*/_jsxDEV(\"nav\", {\n        className: \"section section--portfolio\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container container--lg\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"section__title line-top\",\n            children: \"More Projects\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 29\n          }, this), _.map(projects, (project, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: this.renderProjectNavLinks(project, index, projects, projectCount, projectUrl)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/jack__lyons/Documents/Web Projects/jacklyons-me-2024/src/layouts/project.js"],"names":["React","_","components","Layout","getPageUrl","PortfolioItem","Project","Component","renderProjectNavLinks","project","index","projects","projectCount","currentProjectUrl","projectUrl","prevIndex","prevProject","nextIndex","nextProject","render","data","get","props","config","page","title","subtitle","sections","orderBy","size","map","section","sectionType","component","upperFirst","camelCase","Error"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nimport components, { Layout } from '../components/index';\nimport { getPageUrl } from '../utils';\n\nimport PortfolioItem from '../components/PortfolioItem';\n\nexport default class Project extends React.Component {\n    renderProjectNavLinks(project, index, projects, projectCount, currentProjectUrl) {\n        const projectUrl = getPageUrl(project);\n        if (projectUrl !== currentProjectUrl) {\n            return null;\n        }\n        const prevIndex = index - 1;\n        const prevProject = (index !== 0) ? projects[prevIndex] : null;\n        const nextIndex = index + 1;\n        const nextProject = (index < projectCount - 1) ? projects[nextIndex] : null;\n\n        return (\n            <div className=\"grid portfolio-feed portfolio-feed--tiles\">\n                {prevProject && <PortfolioItem project={prevProject} />}\n                {nextProject && <PortfolioItem project={nextProject} />}\n            </div>\n        );\n    }\n\n    render() {\n        const data = _.get(this.props, 'data');\n        const config = _.get(data, 'config');\n        const page = _.get(this.props, 'page');\n        const title = _.get(page, 'title');\n        const subtitle = _.get(page, 'subtitle');\n        const sections = _.get(page, 'sections');\n        const projectUrl = getPageUrl(page);\n        const projects = _.orderBy(_.get(this.props, 'projects', []), 'date', 'desc');\n        const projectCount = _.size(projects);\n\n        return (\n            <Layout page={page} config={config}>\n                <article className=\"project\">\n                    <header className=\"project__header\">\n                        <div className=\"container container--md\">\n                            <h1 className=\"project__title line-top\">{title}</h1>\n                            {subtitle && (\n                                <div className=\"project__subtitle\">\n                                    {subtitle}\n                                </div>\n                            )}\n                        </div>\n                    </header>\n                    <div className=\"project__body\">\n                        {_.map(sections, (section, index) => {\n                            const sectionType = _.get(section, 'type');\n                            const component = _.upperFirst(_.camelCase(sectionType));\n                            if (!component) {\n                                throw new Error(`page section does not have the 'type' property, page: ${projectUrl}`);\n                            }\n                            const Component = components[component];\n                            if (!Component) {\n                                throw new Error(`no component matching the page section's type: ${sectionType}`);\n                            }\n                            return <Component key={index} section={section} data={data} />;\n                        })}\n                    </div>\n                </article>\n                {(projectCount > 1) && (\n                    <nav className=\"section section--portfolio\">\n                        <div className=\"container container--lg\">\n                            <h2 className=\"section__title line-top\">More Projects</h2>\n                            {_.map(projects, (project, index) => (\n                                <React.Fragment key={index}>\n                                    {this.renderProjectNavLinks(project, index, projects, projectCount, projectUrl)}\n                                </React.Fragment>\n                            ))}\n                        </div>\n                    </nav>\n                )}\n            </Layout>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}