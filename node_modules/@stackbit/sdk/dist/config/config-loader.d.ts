import { ConfigError, ConfigLoadError, ConfigPresetsError, ConfigValidationError } from './config-errors';
import { StopConfigWatch } from './config-loader-esbuild';
import { Config, Model, ModelsSource } from './config-types';
export interface ConfigLoaderOptions {
    dirPath: string;
    modelsSource?: ModelsSource;
    stackbitConfigESBuildOutDir?: string;
    watchCallback?: (result: ConfigLoaderResult) => void;
}
export interface ConfigLoaderResult {
    valid: boolean;
    config: Config | null;
    errors: ConfigError[];
}
export interface NormalizedValidationResult {
    valid: boolean;
    config: Config;
    errors: ConfigValidationError[];
}
export interface RawConfigLoaderResult {
    config?: Record<string, any>;
    errors: ConfigLoadError[];
}
export declare function loadConfig({ dirPath, modelsSource, stackbitConfigESBuildOutDir, watchCallback }: ConfigLoaderOptions): Promise<ConfigLoaderResult & StopConfigWatch>;
export declare function extendConfig({ dirPath, config, externalModels }: {
    dirPath: string;
    config: Record<string, any>;
    externalModels?: Model[];
}): Promise<{
    valid: boolean;
    config: Config;
    errors: (ConfigValidationError | ConfigPresetsError)[];
}>;
export declare function validateAndNormalizeConfig(config: Record<string, any>, externalModels?: Model[]): NormalizedValidationResult;
export declare function loadConfigFromDir({ dirPath, stackbitConfigESBuildOutDir, watchCallback }: {
    dirPath: string;
    stackbitConfigESBuildOutDir?: string;
    watchCallback?: (rawConfigResult: RawConfigLoaderResult) => void;
}): Promise<RawConfigLoaderResult & StopConfigWatch>;
//# sourceMappingURL=config-loader.d.ts.map