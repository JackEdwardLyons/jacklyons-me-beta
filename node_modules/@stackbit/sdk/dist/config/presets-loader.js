"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadPresets = void 0;
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const utils_1 = require("@stackbit/utils");
const config_errors_1 = require("./config-errors");
async function loadPresets(dirPath, config) {
    var _a, _b;
    const presetFiles = [];
    let presetsRelDirs = ['.stackbit/presets', 'node_modules/@stackbit/components/presets'];
    if (((_a = config.presetSource) === null || _a === void 0 ? void 0 : _a.type) === 'files' && ((_b = config.presetSource) === null || _b === void 0 ? void 0 : _b.presetDirs)) {
        presetsRelDirs = [...new Set([...presetsRelDirs, ...config.presetSource.presetDirs])];
    }
    for (const presetsRelDir of presetsRelDirs) {
        const presetsDir = path_1.default.join(dirPath, presetsRelDir);
        if (!(await fs_extra_1.default.pathExists(presetsDir))) {
            continue;
        }
        const files = (await fs_extra_1.default.readdir(presetsDir))
            .filter((fileName) => ['.json', '.yaml', '.yml'].includes(path_1.default.parse(fileName).ext))
            .map((fileName) => path_1.default.join(presetsRelDir, fileName));
        presetFiles.push(...files);
    }
    const presets = {};
    const presetsIdsByModel = {};
    const errors = [];
    for (const presetFile of presetFiles) {
        const presetsRelDir = path_1.default.dirname(presetFile);
        const presetPath = path_1.default.join(dirPath, presetFile);
        let presetData;
        try {
            presetData = await utils_1.parseFile(presetPath);
        }
        catch (err) {
            errors.push(new config_errors_1.ConfigPresetsError(`Error parsing ${presetFile} (${err === null || err === void 0 ? void 0 : err.message})`));
            continue;
        }
        lodash_1.default.forEach(lodash_1.default.get(presetData, 'presets', []), (preset, i) => {
            const presetId = `${presetFile}:presets[${i}]`;
            const { thumbnail, ...rest } = preset;
            presets[presetId] = {
                ...rest,
                ...(thumbnail ? { thumbnail: resolveThumbnailPath(thumbnail, presetsRelDir) } : null),
                modelName: presetData.model
            };
            utils_1.append(presetsIdsByModel, presetData.model, presetId);
        });
    }
    // update models with presets IDs
    const models = lodash_1.default.map(config.models, (model) => {
        const presetIdsForModel = presetsIdsByModel[model.name];
        if (!presetIdsForModel) {
            return model;
        }
        return { ...model, presets: presetIdsForModel };
    });
    return {
        config: Object.assign({}, config, {
            models,
            presets
        }),
        errors
    };
}
exports.loadPresets = loadPresets;
function resolveThumbnailPath(thumbnail, dir) {
    if (thumbnail.startsWith('/')) {
        if (dir.endsWith('@stackbit/components/presets')) {
            dir = dir.replace(/\/presets$/, '');
        }
        else {
            dir = '';
        }
        thumbnail = thumbnail.replace(/^\//, '');
    }
    return path_1.default.join(dir, thumbnail);
}
//# sourceMappingURL=presets-loader.js.map