import { Model, ObjectModel, DataModel, PageModel, ConfigModel, Field, FieldEnum, FieldList, FieldListItems, FieldListModel, FieldListObject, FieldListReference, FieldModel, FieldModelProps, FieldObject, FieldObjectProps, FieldReference, FieldReferenceProps } from '../config/config-types';
export declare function getModelByName(models: Model[], modelName: string): Model | undefined;
export declare function isConfigModel(model: Model): model is ConfigModel;
export declare function isDataModel(model: Model): model is DataModel;
export declare function isListDataModel(model: Model): model is DataModel & {
    isList: true;
};
export declare function isPageModel(model: Model): model is PageModel;
export declare function isObjectModel(model: Model): model is ObjectModel;
export declare function isSingleInstanceModel(model: Model): boolean;
export declare function isObjectField(field: Field): field is FieldObject;
export declare function isModelField(field: Field): field is FieldModel;
export declare function isReferenceField(field: Field): field is FieldReference;
export declare function isCustomModelField(field: Field, modelsByName: Record<string, Model>): boolean;
export declare function isEnumField(field: Field): field is FieldEnum;
export declare function isListOfObjectsField(field: Field): field is FieldListObject;
export declare function isListOfModelsField(field: Field): field is FieldListModel;
export declare function isListOfReferencesField(field: Field): field is FieldListReference;
export declare function isListOfCustomModelsField(field: Field, modelsByName?: Record<string, Model>): field is FieldList;
export declare function isListField(field: Field): field is FieldList;
export declare function isObjectListItems(items: FieldListItems): items is FieldObjectProps;
export declare function isModelListItems(items: FieldListItems): items is FieldModelProps;
export declare function isReferenceListItems(items: FieldListItems): items is FieldReferenceProps;
export declare function isCustomModelListItems(items: FieldListItems, modelsByName?: Record<string, Model>): boolean;
/**
 * Gets a list field and returns its items field. If list field does not define
 * items field, the default field is string:
 *
 * @example
 * listItemField = getListFieldItems({
 *   type: 'list',
 *   name: '...',
 *   items: { type: 'object', fields: [] }
 * }
 * listItemField => {
 *   type: 'object',
 *   name: '...',
 *   fields: []
 * }
 *
 * // list field without `items`
 * listItemField = getListFieldItems({ type: 'list', name: '...' }
 * listItemField => { type: 'string' }
 *
 * @param {Object} field
 * @return {Object}
 */
export declare function getListFieldItems(field: FieldList): FieldListItems;
export declare function normalizeListField(field: FieldList): FieldList;
export declare function normalizeListFieldInPlace(field: FieldList): FieldList;
export declare function assignLabelFieldIfNeeded(modelOrField: Model | FieldObjectProps): void;
export declare function resolveLabelFieldForModel(modelOrField: Model | FieldObjectProps): string | null;
export declare function getModelFieldForModelKeyPath(model: Model, modelKeyPath: string[]): (import("../config/config-types").YamlObjectModel & import("../config/config-types").BaseModel & {
    file?: undefined;
    isList?: undefined;
    filePath?: undefined;
    singleInstance?: undefined;
    folder?: undefined;
    match?: undefined;
    exclude?: undefined;
    items?: undefined;
    layout?: undefined;
    urlPath?: undefined;
    hideContent?: undefined;
    source?: undefined;
}) | (import("../config/config-types").BaseDataModelFields & {
    items?: undefined;
} & import("../config/config-types").BaseModel & {
    layout?: undefined;
    urlPath?: undefined;
    hideContent?: undefined;
    source?: undefined;
}) | (import("../config/config-types").BaseDataModeList & {
    fields?: undefined;
} & import("../config/config-types").BaseModel & {
    layout?: undefined;
    urlPath?: undefined;
    hideContent?: undefined;
    source?: undefined;
}) | (import("../config/config-types").YamlPageModel & import("../config/config-types").BaseModel & {
    isList?: undefined;
    items?: undefined;
    source?: undefined;
}) | (import("../config/config-types").YamlConfigModel & import("../config/config-types").BaseModel & {
    isList?: undefined;
    filePath?: undefined;
    singleInstance?: undefined;
    folder?: undefined;
    match?: undefined;
    exclude?: undefined;
    items?: undefined;
    layout?: undefined;
    urlPath?: undefined;
    hideContent?: undefined;
    source?: undefined;
}) | import("../config/config-types").FieldSimpleProps | import("../config/config-types").FieldEnumDropdownProps | import("../config/config-types").FieldEnumThumbnailsProps | import("../config/config-types").FieldEnumPaletteProps | import("../config/config-types").FieldImageProps | import("../config/config-types").FieldNumberProps | FieldObjectProps | FieldModelProps | FieldReferenceProps | import("../config/config-types").FieldStyle | FieldList | null;
//# sourceMappingURL=model-utils.d.ts.map